esphome:
  name: $device_name
  platform: ESP8266
  board: esp8285
  comment: https://community.home-assistant.io/t/anko-smart-kettle/302351/7

uart:
  rx_pin: GPIO03
  tx_pin: GPIO01
  baud_rate: 9600

tuya:

text_sensor:
  - platform: template
    name: "$device_name: status"
    id: text_state

select:
  - platform: template
    name: "$device_name: set temperature"
    id: kettle_control
    update_interval: 5s
    options:
      - 40º
      - 50º
      - 60º
      - 80º
      - 90º
    lambda: |-
      return to_string(int(id(kettle_target).state)) + "º";
    set_action:
      - lambda: |-
          if (strcmp(x.c_str(), "40º") == 0) {
            tuya_tuya->set_enum_datapoint_value(4, 0);
          } else if (strcmp(x.c_str(), "50º") == 0) {
            tuya_tuya->set_enum_datapoint_value(4, 1);
          } else if (strcmp(x.c_str(), "60º") == 0) {
            tuya_tuya->set_enum_datapoint_value(4, 2);
          } else if (strcmp(x.c_str(), "80º") == 0) {
            tuya_tuya->set_enum_datapoint_value(4, 3);
          } else if (strcmp(x.c_str(), "90º") == 0) {
            tuya_tuya->set_enum_datapoint_value(4, 4);
          } else {
            tuya_tuya->set_enum_datapoint_value(4, 4);
          }

switch:
  - platform: template
    id: esp_activity
    optimistic: true

  - platform: tuya
    id: kettle_relay
    name: "$device_name: boil"
    switch_datapoint: 1

  - platform: tuya
    name: "$device_name: keep warm"
    switch_datapoint: 13

sensor:
  - platform: template
    name: "$device_name: target temperature"
    id: kettle_target
    unit_of_measurement: "°"
    accuracy_decimals: 0
    on_value:
      then:
        - lambda: |-
            std::string option = to_string(int(x)) + "º";
            auto call = id(kettle_control).make_call();
            call.set_option(option);
            call.perform();

  - platform: tuya
    id: kettle_temp
    name: "$device_name: current temperature"
    sensor_datapoint: 2
    unit_of_measurement: "°"
    accuracy_decimals: 0
    filters:
      - filter_out: 0
      - or:
        - throttle: 10min
        - delta: 1
    on_raw_value: # We don't want filters to affect this
      then:
        - if:
            condition:
              lambda: |-
                return id(kettle_temp).raw_state == 0;
            then:
              - if:
                  condition:
                    text_sensor.state:
                      id: text_state
                      state: "Lifted"
                  else:
                    - text_sensor.template.publish:
                        id: text_state
                        state: "Lifted"
            else:
              - if:
                  condition:
                    text_sensor.state:
                      id: text_state
                      state: "Lifted"
                  then:
                    - text_sensor.template.publish:
                        id: text_state
                        state: "Ready"

  - platform: tuya
    id: tuya_15
    sensor_datapoint: 15
    on_value:
      then:
        - if:
            condition:
              lambda: |-
                return id(kettle_temp).raw_state == 0;
            else:
              - text_sensor.template.publish:
                  id: text_state
                  state: !lambda |-
                    switch(static_cast<int>(id(tuya_15).state)) {
                      case 0: return {"Ready"};
                      case 1: return {"Heating"};
                      case 2: return {"Done"};
                      case 3: return {"Keep warm"};
                      default: return {""};
                    }
  
  - platform: tuya
    id: tuya_4
    sensor_datapoint: 4
    on_value:
      then:
      - sensor.template.publish:
          id: kettle_target
          state: !lambda |-
            switch(static_cast<int>(id(tuya_4).state)) {
              case 0: return 80;
              case 1: return 85;
              case 2: return 90;
              case 3: return 95;
              case 4: return 100;
              default: return 0;
            }